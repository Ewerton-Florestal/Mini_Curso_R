# -*- coding: utf-8 -*-
"""Mini_Curso_Regress√£o.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ShP2vgbmlnbslhcVUVNWGdI9tiXJ2aKD

# **Passo 1: Primero vamos instalar os Pacotes Necess√°rios.**

**Antes de criar o gr√°fico, precisamos instalar as bibliotecas que ser√£o utilizadasm, caso ela ainda n√£o estejam instaladas.**
"""

install.packages('ggplot2')  # Pacote para an√°lises estat√≠sticas experimentais
install.packages('ggpmisc') # Para adicionar equa√ß√µes de regress√£o ao gr√°fico
install.packages('readxl') # Para importar arquivos Excel

"""# **Passo 2: Carregar os Pacotes Necess√°rios**

**Antes de criar o gr√°fico, precisamos carregar as bibliotecas que ser√£o utilizadas.**
"""

# Pacotes necess√°rios
library(ggplot2)      # Para criar gr√°ficos
library(ggpmisc)      # Para adicionar equa√ß√µes de regress√£o ao gr√°fico
library(readxl)     # Para importar arquivos Excel

"""**üìå ggplot2: Biblioteca principal para criar gr√°ficos.**

**üìå ggpmisc: Permite adicionar equa√ß√µes de regress√£o e R¬≤ diretamente no gr√°fico.**

**üìå readxl: Utilizado para ler arquivos do Excel.**

# **Passo 3: Importar os Dados**

**Agora, carregamos os dados que ser√£o usados na an√°lise.**
"""

# Carregar os dados
dados <- read_xlsx("/content/mini_curso_regressao2.xlsx")

"""**üìå read.xlsx() importa os dados de um arquivo Excel.**

üîπ**Verificar se os dados foram carregados corretamente:**
"""

# Exibir as primeiras linhas dos dados
head(dados)

"""üîπ**Obter um resumo estat√≠stico dos dados:**"""

# Resumo dos dados
summary(dados)

"""**üìå Isso ajuda a entender a estrutura dos dados antes da modelagem.**

# **Passo 4: Criar o Gr√°fico de Regress√£o**

**Agora come√ßa a constru√ß√£o do gr√°fico no ggplot2. Vamos entender cada parte.**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones))

"""**üìå ggplot(dados, aes(...)) define os eixos e as vari√°veis a serem usadas no gr√°fico.**

**‚úî x = espacamento ‚Üí Vari√°vel no eixo X.**

**‚úî y = diametro ‚Üí Vari√°vel no eixo Y.**

‚û§ **Na segunda parte vamos adicionar os pontos ao gr√°fico**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones)) +

  geom_point(size=3)

"""**üìå geom_point() adiciona os pontos ao gr√°fico.**

**‚úî O size=3 define o tamanho dos pontos.**

‚û§ **Em seguida adicionamos a linha de regress√£o**
"""

ggplot(dados, aes(x=espacamento, y=diametro,group=clones, color=clones)) +
      geom_point(size=3)+

      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=TRUE)

"""**üìå geom_smooth() adiciona uma curva de ajuste.**

**‚úî method="lm" ‚Üí Ajuste de regress√£o linear.**

**‚úî formula = y ~ poly(x, 1) ‚Üí Define a equa√ß√£o da regress√£o (polin√¥mio de 1¬™ ordem). Caso queria de polin√¥mio de 2¬™ basta mudar do numero 1 para o 2 e assim sucessivamente**

**‚úî se=FALSE ‚Üí N√£o exibe a √°rea sombreada de intervalo de confian√ßa.**

‚û§ **Agora vamos adicionar a equa√ß√£o da regress√£o e o R¬≤**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones)) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+

      stat_poly_eq(aes(label = paste(after_stat(eq.label),
      after_stat(rr.label),after_stat(p.value.label), sep = "~~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)")

"""**üìå stat_poly_eq() exibe a equa√ß√£o da regress√£o e o coeficiente de determina√ß√£o (R¬≤).**

**‚úî eq.label ‚Üí Mostra a equa√ß√£o da reta.**

**‚úî rr.label ‚Üí Mostra o valor de R¬≤.**

**‚úî  p.value.label ‚Üí Mostra o valor de significancia (p)**

**‚úî label.x="right" ‚Üí Posiciona a equa√ß√£o √† direita.**

**‚úî label.y="bottom" ‚Üí Posiciona a equa√ß√£o na parte inferior.**

‚û§ **Agora vamos come√ßar a personalizar o nosso gr√°fico, vamos come√ßar pelo tema**
"""

ggplot(dados, aes(x=espacamento, y=diametro,group=clones, color=clones)) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+
      stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = "~~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)") +

      theme_classic() +
      theme(text=element_text(family="Times", size=15, face="bold"),
      axis.text = element_text(color = "black", face="bold"))

"""**üìå theme_classic() aplica um tema mais limpo ao gr√°fico.**

**üìå element_text() ajusta o tamanho e estilo do texto.**

**‚úî family="Times" ‚Üí Usa a fonte Times New Roman.**

**‚úî size=15 ‚Üí Define o tamanho do texto.**

**‚úî face="bold" ‚Üí Deixa o texto em negrito.**

‚û§**Aqui vamos ajustar os rotulos dos eixos**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones)) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+
      stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = "~~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)") +
      theme_classic() +
      theme(text=element_text(family="Times", size=15, face="bold"),
      axis.text = element_text(color = "black", face="bold")) +

      ylab(expression(bold("Di√¢metro (cm)"))) +
      xlab(expression(bold("Espa√ßamento (m¬≤)")))

"""**üìå Define os nomes dos eixos em negrito usando expression(bold(...)).**

‚û§ **Dessa ver vamos ajustar as escalas dos eixos, para que se ajuste aos nossos dados**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones )) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+
      stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = "~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)") +
      theme_classic() +
      theme(text=element_text(family="Times", size=15, face="bold"),
      axis.text = element_text(color = "black", face="bold")) +
      ylab(expression(bold("Di√¢metro (cm)"))) +
      xlab(expression(bold("Espa√ßamento (m¬≤)"))) +

      scale_y_continuous(breaks = seq(3,20,2)) +
      scale_x_continuous(breaks = c(2, 2.5, 5, 6, 7.5), labels = c('2', '2.5', '5', '6', '7.5'))

"""**üìå scale_y_continuous() ajusta os valores do eixo Y.**

**‚úî O eixo Y ter√° intervalos de 2, de 3 at√© 18.**

**üìå scale_x_continuous() ajusta os valores do eixo X.**

**‚úî O eixo X mostrar√° os r√≥tulos personalizados para os valores 2, 2.5, 5, 6 e 7.5.**

‚û§ **Vamos adicionar uma anota√ß√£o no nosso gr√°fico**
"""

ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones)) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+
      stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = "~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)") +
      theme_classic() +
      theme(text=element_text(family="Times", size=15, face="bold"),
      axis.text = element_text(color = "black", face="bold")) +
      ylab(expression(bold("Di√¢metro (cm)"))) +
      xlab(expression(bold("Espa√ßamento (m¬≤)"))) +
      scale_y_continuous(breaks = seq(3,20,2)) +
      scale_x_continuous(breaks = c(2, 2.5, 5, 6, 7.5), labels = c('2', '2.5', '5', '6', '7.5'))+
      annotate("text", x = 7.5, y = 4 , label = "A",
      size = 5, color = "black", fontface="bold", family="Times")

"""**üìå annotate() adiciona texto no gr√°fico.**

**‚úî x = 2, y = 17 ‚Üí Define a posi√ß√£o do texto.**

**‚úî label = "A" ‚Üí Texto que ser√° exibido.**

**‚úî size = 5 ‚Üí Define o tamanho da fonte.**

**‚úî fontface="bold" ‚Üí Texto em negrito.**

# **Passo 5: Salvar o Gr√°fico em um Arquivo**

**Ap√≥s criar o gr√°fico, podemos salv√°-lo como uma imagem**

**Primeiro, salvamos o gr√°fico em uma vari√°vel, que aqui chamo de grafico**
"""

grafico <- ggplot(dados, aes(x=espacamento, y=diametro, group=clones, color=clones)) +
      geom_point(size=3)+
      geom_smooth(method="lm", formula = y ~ poly(x, 1), se=FALSE)+
      stat_poly_eq(aes(label = paste(after_stat(eq.label), after_stat(rr.label), after_stat(p.value.label), sep = "~~")),
             formula = y ~ poly(x, 1, raw=TRUE),
             parse = TRUE,
             label.x="left",
             label.y="top",
             eq.with.lhs = "italic(diametro)~'='~",
             eq.x.rhs="~italic(Espa√ßamento)") +
      theme_classic() +
      theme(text=element_text(family="Times", size=15, face="bold"),
      axis.text = element_text(color = "black", face="bold")) +
      ylab(expression(bold("Di√¢metro (cm)"))) +
      xlab(expression(bold("Espa√ßamento (m¬≤)"))) +
      scale_y_continuous(breaks = seq(3,20,2)) +
      scale_x_continuous(breaks = c(2, 2.5, 5, 6, 7.5), labels = c('2', '2.5', '5', '6', '7.5')) +
      annotate("text", x = 7.5, y = 4 , label = "A", size = 5, color = "black", fontface="bold", family="Times")

"""**Ap√≥s salvar, usamos o ggsave() para salvar o arquivo como png e definimos a altura, largura e o dpi(resolu√ß√£o)**"""

ggsave("figura1.png", grafico, width=10, height=10, dpi=300)

"""**üìå ggsave() salva o gr√°fico no formato PNG.**

**‚úî width=10, height=10 ‚Üí Define o tamanho da imagem.**

**‚úî dpi=300 ‚Üí Garante uma alta resolu√ß√£o.**
"""